<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MCTS-Core</name>
    </assembly>
    <members>
        <member name="T:MCTS.Core.Board">
            <summary>
            Represents an abstract board state <para/>
            Can be used for implementations of many different games
            </summary>
        </member>
        <member name="P:MCTS.Core.Board.CurrentPlayer">
            <summary>
            The playerID of the current player
            </summary>
        </member>
        <member name="F:MCTS.Core.Board.winner">
            <summary>
            The winner value of the board state <para/>
            -1 if no winner yet <para/>
            0 if game is a tie <para/>
            Any positive integer is the winning players ID
            </summary>
        </member>
        <member name="F:MCTS.Core.Board.possibleMoves">
            <summary>
            A list of all possible moves that can follow from this board state
            </summary>
        </member>
        <member name="F:MCTS.Core.Board.WIN_SCORE">
            <summary>
            The score awarded to a player after a win
            </summary>
        </member>
        <member name="F:MCTS.Core.Board.DRAW_SCORE">
            <summary>
            The score awarded to a player after a draw
            </summary>
        </member>
        <member name="M:MCTS.Core.Board.SimulateUntilEnd">
            <summary>
            Simulates random plays on this board until the game has ended
            </summary>
            <returns>The resultant board after it has been simulated</returns>
        </member>
        <member name="M:MCTS.Core.Board.GetScore(System.Int32)">
            <summary>
            Gets the score for the provided player at this board state<para/>
            No score is returned if the game is not over
            </summary>
            <param name="player">The player to get the score of at this board state</param>
            <returns>The score for the given player at this board state</returns>
        </member>
        <member name="P:MCTS.Core.Board.PreviousPlayer">
            <summary>
            Returns the playerID of the previous player
            </summary>
            <returns>The playerID of the previous player</returns>
        </member>
        <member name="P:MCTS.Core.Board.NextPlayer">
            <summary>
            Returns the playerID of the next player
            </summary>
            <returns>The playerID of the next player</returns>
        </member>
        <member name="P:MCTS.Core.Board.Winner">
            <summary>
            Returns the value of the winner integer <para/>
            -1 if no winner yet <para/>
            0 if game is a tie <para/>
            Any positive integer is the winning players ID
            </summary>
            <returns>An integer indicating if the game has a winner, is a draw, or neither</returns>
        </member>
        <member name="M:MCTS.Core.Board.MakeMove(MCTS.Core.Move)">
            <summary>
            Performs a move on this board state for the current player and returns the updated state.
            </summary>
            <param name="move">The move to make</param>
            <returns>A board instance which has had the passed in move made</returns>
        </member>
        <member name="M:MCTS.Core.Board.PossibleMoves">
            <summary>
            Gets a list of possible moves that can follow from this board state
            </summary>
            <returns>A list of moves that can follow from this board state</returns>
        </member>
        <member name="M:MCTS.Core.Board.Duplicate">
            <summary>
            Performs a deep copy of the current board state and returns the copy
            </summary>
            <returns>A copy of this board state</returns>
        </member>
        <member name="M:MCTS.Core.Board.ToRichString">
            <summary>
            Gives a rich text string representation of this board <para/>
            The output string will have color tags that make the board easier to read
            </summary>
            <returns>A rich text string representation of this grid based board</returns>
        </member>
        <member name="M:MCTS.Core.Board.PlayerCount">
            <summary>
            Returns amount of players playing on this board <para/>
            Can't have static polymorphism and a workaround would be less efficient for execution speed <para/>
            Compromise is to have every instance contain the player count
            </summary>
            <returns>The amount of players playing on this board</returns>
        </member>
        <member name="M:MCTS.Core.Board.DetermineWinner">
            <summary>
            Determines if there is a winner or not for this board state and updates the winner integer accordingly
            </summary>
        </member>
        <member name="M:MCTS.Core.Board.DetermineWinner(MCTS.Core.Move)">
            <summary>
            A more efficient method of determining if there is a winner <para/>
            Saves time by using knowledge of the last move to remove unnessessary computation
            </summary>
            <param name="move">The last move made before calling this method</param>
        </member>
        <member name="T:MCTS.Core.Games.C4Board">
            <summary>
            A Connect 4 game board, which allows a game of Connect 4 to be played out on it
            </summary>
        </member>
        <member name="M:MCTS.Core.Games.C4Board.#ctor">
            <summary>
            Creates a new Connect 4 board representing an empty game
            </summary>
        </member>
        <member name="M:MCTS.Core.Games.C4Board.#ctor(MCTS.Core.Games.C4Board)">
            <summary>
            Create a new Connect 4 board as a copy from an existing board
            </summary>
            <param name="board">The board to make a copy of</param>
        </member>
        <member name="M:MCTS.Core.Games.C4Board.Duplicate">
            <summary>
            Duplicates the current Connect 4 board
            </summary>
            <returns>A clone of the current Connect 4</returns>
        </member>
        <member name="M:MCTS.Core.Games.C4Board.MakeMove(MCTS.Core.Move)">
            <summary>
            Makes a move on this Connect 4 board at the specified move position
            </summary>
            <param name="move">The move to make</param>
            <returns>A reference to this Connect 4 board</returns>
        </member>
        <member name="M:MCTS.Core.Games.C4Board.PossibleMoves">
            <summary>
            Get a list of all possible moves for this Connect 4 board instance
            </summary>
            <returns>A list of all possible moves for this Connect 4 board instance</returns>
        </member>
        <member name="M:MCTS.Core.Games.C4Board.DetermineWinner">
            <summary>
            Determine if the current game is over
            </summary>
        </member>
        <member name="M:MCTS.Core.Games.C4Board.DetermineWinner(MCTS.Core.Move)">
            <summary>
            Determine if the current game is over <para/>
            Uses knowledge of the last move to save computation time
            </summary>
            <param name="move">The last move made</param>
        </member>
        <member name="M:MCTS.Core.Games.C4Board.PlayerCount">
            <summary>
            Used to obtain the number of players on a Connect 4 board, which is always 2
            </summary>
            <returns>The number of players on a Connect 4 board, which is always 2</returns>
        </member>
        <member name="T:MCTS.Core.Games.C4Move">
            <summary>
            A move that can be made in Connect 4
            </summary>
        </member>
        <member name="P:MCTS.Core.Games.C4Move.X">
            <summary>
            X position of this move
            </summary>
        </member>
        <member name="P:MCTS.Core.Games.C4Move.Y">
            <summary>
            Y position of this move <para/>
            Not chosen by the user, instead it is calculated when the move is made
            </summary>
        </member>
        <member name="M:MCTS.Core.Games.C4Move.#ctor(System.Int32)">
            <summary>
            Creates a new Connect 4 move with the given x position
            </summary>
            <param name="xPos">X position of the move to make</param>
        </member>
        <member name="M:MCTS.Core.Games.C4Move.ToString">
            <summary>
            Gives a string representation of this Connect 4 move
            </summary>
            <returns>A string representation of this connect 4 move</returns>
        </member>
        <member name="M:MCTS.Core.Games.C4Move.Equals(System.Object)">
            <summary>
            Equality override for a Connect 4 move <para/>
            Two moves are equal if their x positions are equal
            </summary>
            <param name="obj">The other C4Move instance to compare this one too</param>
            <returns>True if the objects are equal, false otherwise</returns>
        </member>
        <member name="M:MCTS.Core.Games.C4Move.GetHashCode">
            <summary>
            Returns a unique hash code for this instance <para/>
            Represented as a 1 digit integer
            </summary>
            <returns>A unique integer for this instance</returns>
        </member>
        <member name="M:MCTS.Core.Games.C4Move.SetY(System.Int32)">
            <summary>
            Set the Y position of this move <para/>
            Used when calculating what cell this move can be played in
            </summary>
        </member>
        <member name="T:MCTS.Core.Games.OthelloBoard">
            <summary>
            An Othello game board, which allows a game of Othello to be played out on it
            </summary>
        </member>
        <member name="M:MCTS.Core.Games.OthelloBoard.#ctor">
            <summary>
            Creates a new Othello board representing an empty game
            </summary>
        </member>
        <member name="M:MCTS.Core.Games.OthelloBoard.#ctor(MCTS.Core.Games.OthelloBoard)">
            <summary>
            Private constructor used for deep copies of a board instance
            </summary>
            <param name="board">The board instance to make a deep copy of</param>
        </member>
        <member name="M:MCTS.Core.Games.OthelloBoard.GetSandwichedPieces(MCTS.Core.Point,System.Int32)">
            <summary>
            Gets a list of sandwiched pieces on this board, meaning pieces that would be sandwiched between two of the passed in players pieces if one was placed at the passed in point
            </summary>
            <param name="pos">The position being checked for sandwiched pieces</param>
            <param name="player">The player playing the piece</param>
            <returns>A list of sandwiched pieces as a result of the passed in player making a move at the passed in board position</returns>
        </member>
        <member name="M:MCTS.Core.Games.OthelloBoard.Duplicate">
            <summary>
            Duplicate this baord state, returning a deep copy of it
            </summary>
            <returns>A deep copy of this board state</returns>
        </member>
        <member name="M:MCTS.Core.Games.OthelloBoard.MakeMove(MCTS.Core.Move)">
            <summary>
            Makes a move on this Othello board at the specified move position
            </summary>
            <param name="move">The move to make</param>
            <returns>A reference to this Othello board</returns>
        </member>
        <member name="M:MCTS.Core.Games.OthelloBoard.PossibleMoves">
            <summary>
            Returns the possibleMoves list for this board instance, which contains a list of all possible moves tat can be taken from this board state
            </summary>
            <returns>A list of possible moves that can be taken from this baord state</returns>
        </member>
        <member name="M:MCTS.Core.Games.OthelloBoard.CalculatePossibleMoves">
            <summary>
            Calculates the possible moves that can be made from this board state for the current player and stores the result in the possibleMoves list
            </summary>
        </member>
        <member name="M:MCTS.Core.Games.OthelloBoard.DetermineWinner">
            <summary>
            Determines the winner of the current Othello game <para/>
            The winner is the player with the most pieces on the board when there are no possible moves left in the game
            </summary>
        </member>
        <member name="M:MCTS.Core.Games.OthelloBoard.DetermineWinner(MCTS.Core.Move)">
            <summary>
            There is no way to speed up the calculation of a winner based on the last move in Othello <para/>
            This method must still be kept to not break polymorphism
            </summary>
            <param name="move">The previous move made on this board</param>
        </member>
        <member name="M:MCTS.Core.Games.OthelloBoard.PlayerCount">
            <summary>
            Gets the amount of players on this board
            </summary>
            <returns>The amount of players on this baord</returns>
        </member>
        <member name="T:MCTS.Core.Games.OthelloMove">
            <summary>
            A move that can be made in Othello
            </summary>
        </member>
        <member name="P:MCTS.Core.Games.OthelloMove.Position">
            <summary>
            Position of this move
            </summary>
        </member>
        <member name="P:MCTS.Core.Games.OthelloMove.CapturableCells">
            <summary>
            A list of cells that will be captured as a result of this move
            </summary>
        </member>
        <member name="M:MCTS.Core.Games.OthelloMove.#ctor(MCTS.Core.Point,System.Collections.Generic.List{MCTS.Core.Point})">
            <summary>
            Creates a new Othello move with the given x and y positions
            </summary>
            <param name="pos">Position of the move to make</param>
            <param name="cellsToCapture">A list of cells that will be captured as a result of this move</param>
        </member>
        <member name="M:MCTS.Core.Games.OthelloMove.ToString">
            <summary>
            Gives a string representation of this Othello move
            </summary>
            <returns>A string representation of this Othello move</returns>
        </member>
        <member name="M:MCTS.Core.Games.OthelloMove.Equals(System.Object)">
            <summary>
            Equality override for a Othello move <para/>
            Two moves are equal if their x and y positions are equal
            </summary>
            <param name="obj">The other OthelloMove instance to compare this one too</param>
            <returns>True if the objects are equal, false otherwise</returns>
        </member>
        <member name="M:MCTS.Core.Games.OthelloMove.GetHashCode">
            <summary>
            Returns a unique hash code for this instance <para/>
            Represented as a 4 digit integer
            </summary>
            <returns>A unique integer for this instance</returns>
        </member>
        <member name="T:MCTS.Core.Games.TTTBoard">
            <summary>
            A Tic-Tac-Toe game board, which allows a game of Tic-Tac-Toe to be played out on it
            </summary>
        </member>
        <member name="M:MCTS.Core.Games.TTTBoard.#ctor">
            <summary>
            Creates a new Tic-Tac-Toe board representing an empty game
            </summary>
        </member>
        <member name="M:MCTS.Core.Games.TTTBoard.#ctor(MCTS.Core.Games.TTTBoard)">
            <summary>
            Create a new Tic-Tac-Toe board as a copy from an existing board
            </summary>
            <param name="board">The board to make a copy of</param>
        </member>
        <member name="M:MCTS.Core.Games.TTTBoard.Duplicate">
            <summary>
            Duplicates the current Tic-Tac-Toe board
            </summary>
            <returns>A clone of the current Tic-Tac-Toe Board</returns>
        </member>
        <member name="M:MCTS.Core.Games.TTTBoard.MakeMove(MCTS.Core.Move)">
            <summary>
            Makes a move on this Tic-Tac-Toe board at the specified move position
            </summary>
            <param name="move">The move to make</param>
            <returns>A reference to this Tic-Tac-Toe board</returns>
        </member>
        <member name="M:MCTS.Core.Games.TTTBoard.PossibleMoves">
            <summary>
            Get a list of all possible moves for this Tic-Tac-Toe board instance
            </summary>
            <returns>A list of all possible moves for this Tic-Tac-Toe board instance</returns>
        </member>
        <member name="M:MCTS.Core.Games.TTTBoard.DetermineWinner">
            <summary>
            Determine if the current game is over
            </summary>
        </member>
        <member name="M:MCTS.Core.Games.TTTBoard.DetermineWinner(MCTS.Core.Move)">
            <summary>
            Determine if the current game is over <para/>
            Uses knowledge of the last move to save computation time
            </summary>
            <param name="move">The last move made</param>
        </member>
        <member name="M:MCTS.Core.Games.TTTBoard.PlayerCount">
            <summary>
            Used to obtain the number of players on a Tic-Tac-Toe board, which is always 2
            </summary>
            <returns>The number of players on a Tic-Tac-Toe board, which is always 2</returns>
        </member>
        <member name="T:MCTS.Core.Games.TTTMove">
            <summary>
            A move that can be made in Tic-Tac-Toe
            </summary>
        </member>
        <member name="P:MCTS.Core.Games.TTTMove.X">
            <summary>
            X position of this move
            </summary>
        </member>
        <member name="P:MCTS.Core.Games.TTTMove.Y">
            <summary>
            Y position of this move
            </summary>
        </member>
        <member name="M:MCTS.Core.Games.TTTMove.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new Tic-Tac-Toe move with the given x and y positions
            </summary>
            <param name="xPos">X position of the move to make</param>
            <param name="yPos">Y position of the move to make</param>
        </member>
        <member name="M:MCTS.Core.Games.TTTMove.ToString">
            <summary>
            Gives a string representation of this Tic-Tac-Toe move
            </summary>
            <returns>A string representation of this Tic-Tac-Toe move</returns>
        </member>
        <member name="M:MCTS.Core.Games.TTTMove.Equals(System.Object)">
            <summary>
            Equality override for a Tic-Tac-Toe move <para/>
            Two moves are equal if their x and y positions are equal
            </summary>
            <param name="obj">The other TTTMove instance to compare this one too</param>
            <returns>True if the objects are equal, false otherwise</returns>
        </member>
        <member name="M:MCTS.Core.Games.TTTMove.GetHashCode">
            <summary>
            Returns a unique hash code for this instance <para/>
            Represented as a 4 digit integer
            </summary>
            <returns>A unique integer for this instance</returns>
        </member>
        <member name="T:MCTS.Core.GridBasedBoard">
            <summary>
            An abstract extension of <see cref="T:MCTS.Core.Board"/> <para/>
            Contains common elements of grid based board games, such as Tic-Tac-Toe, Connect 4, Chess, etc
            </summary>
        </member>
        <member name="F:MCTS.Core.GridBasedBoard.boardContents">
            <summary>
            The contents of this game board
            </summary>
        </member>
        <member name="M:MCTS.Core.GridBasedBoard.GetCell(System.Int32,System.Int32)">
            <summary>
            Returns the contents of this board cell at the given indices
            </summary>
            <param name="x">The x index of the cell to get</param>
            <param name="y">The y index of the cell to get</param>
            <returns>The contents of this board cell at the index [x,y]</returns>
        </member>
        <member name="P:MCTS.Core.GridBasedBoard.Width">
            <summary>
            The width of this game board
            </summary>
        </member>
        <member name="P:MCTS.Core.GridBasedBoard.Height">
            <summary>
            The height of this game board
            </summary>
        </member>
        <member name="M:MCTS.Core.GridBasedBoard.ToString">
            <summary>
            Gives a string representation of this grid based board
            </summary>
            <returns>A string representation of this grid based board</returns>
        </member>
        <member name="M:MCTS.Core.GridBasedBoard.ToRichString">
            <summary>
            Gives a rich text string representation of this grid based board <para/>
            The output string will have color tags that make the board easier to read
            </summary>
            <returns>A rich text string representation of this grid based board</returns>
        </member>
        <member name="T:MCTS.Core.Point">
            <summary>
            A 2D point that uses integers, used to easily refer to cells in a 2D array
            </summary>
        </member>
        <member name="F:MCTS.Core.Point.X">
            <summary>
            The X coordinate of this point
            </summary>
        </member>
        <member name="F:MCTS.Core.Point.Y">
            <summary>
            The Y coordinate of this point
            </summary>
        </member>
        <member name="M:MCTS.Core.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new point with the given X and Y coordinates
            </summary>
            <param name="x">The X coordinate of the point to set</param>
            <param name="y">The Y coordinate of the point to set</param>
        </member>
        <member name="T:MCTS.Core.TreeSearch`1">
            <summary>
            Runs Monte Carlo Tree Search on a given game board <para/>
            Every time <see cref="M:MCTS.Core.TreeSearch`1.Step"/> is called, the algorithm performs one Select, Expand, Simulate and Backpropagate cycle <para/>
            The algorithm will run until the <see cref="M:MCTS.Core.TreeSearch`1.Finish"/> method is called
            </summary>
            <typeparam name="T">The type of node to use for the tree search</typeparam>
        </member>
        <member name="P:MCTS.Core.TreeSearch`1.Root">
            <summary>
            The root node of the search tree
            </summary>
        </member>
        <member name="P:MCTS.Core.TreeSearch`1.Finished">
            <summary>
            Signals if the MCTS algorithm has finished running
            </summary>
        </member>
        <member name="P:MCTS.Core.TreeSearch`1.UniqueNodes">
            <summary>
            The amount of unique nodes in the tree
            </summary>
        </member>
        <member name="P:MCTS.Core.TreeSearch`1.AllNodes">
            <summary>
            A list of all nodes in the tree in the order that they were added
            </summary>
        </member>
        <member name="M:MCTS.Core.TreeSearch`1.#ctor(MCTS.Core.Board)">
            <summary>
            Creates a new Monte Carlo Tree Search with the given game board
            </summary>
            <param name="gameBoard">The game board to perform the MCTS with</param>
        </member>
        <member name="M:MCTS.Core.TreeSearch`1.Step">
            <summary>
            Perform a step of MCTS <para/>
            Selects the highest UCT value node, expands it, simulates its children and backpropagates the results up the tree
            </summary>
        </member>
        <member name="M:MCTS.Core.TreeSearch`1.Selection(MCTS.Core.Node)">
            <summary>
            The first step of MCTS <para/>
            The tree is searched recursively using the Upper Confidence Bound 1 calculation to select the best node to expand
            </summary>
            <param name="n">The current root node in the search</param>
            <returns>The best node to expand, obtained using Upper Confidence Bound 1</returns>
        </member>
        <member name="M:MCTS.Core.TreeSearch`1.BestNodeChoice(MCTS.Core.Node)">
            <summary>
            Given a root node, will choose a child which maximises reward, based on the game tree constructed so far
            </summary>
            <param name="n">The root node to choose the best child of</param>
            <returns>The best child of the given root node</returns>
        </member>
        <member name="M:MCTS.Core.TreeSearch`1.Finish">
            <summary>
            Can be called to gracefully halt execution of the algorithm
            </summary>
        </member>
        <member name="P:MCTS.Core.TreeSearch`1.NodesVisited">
            <summary>
            The total number of nodes that have been visited so far
            </summary>
        </member>
        <member name="T:MCTS.Core.Move">
            <summary>
            An abstract class that any moves of <see cref="T:MCTS.Core.Board"/> types must implement
            </summary>
        </member>
        <member name="M:MCTS.Core.Move.Equals(System.Object)">
            <summary>
            Equality override which returns true if this instance is equal to a passed in object
            </summary>
            <param name="obj">The other object to compare with</param>
            <returns>True if this instance is equal to the passed in object</returns>
        </member>
        <member name="M:MCTS.Core.Move.GetHashCode">
            <summary>
            Returns a unique hash code for this move instance
            </summary>
            <returns>A unique integer for this instance</returns>
        </member>
        <member name="M:MCTS.Core.Move.ToString">
            <summary>
            Returns a string representation of this move instance
            </summary>
            <returns>A string representation of this move instance</returns>
        </member>
        <member name="T:MCTS.Core.Node">
            <summary>
            A node for use with a Monte Carlo Search Tree <para/>
            Contains a game state, as well as stats such as Visits, score, Parent and Children
            </summary>
        </member>
        <member name="P:MCTS.Core.Node.Parent">
            <summary>
            This nodes Parent node
            </summary>
        </member>
        <member name="P:MCTS.Core.Node.GameBoard">
            <summary>
            The GameBoard state for this node
            </summary>
        </member>
        <member name="P:MCTS.Core.Node.Children">
            <summary>
            A list of all the Children of this node
            </summary>
        </member>
        <member name="P:MCTS.Core.Node.Visits">
            <summary>
            The amount of times this node has been visited directly or via backpropagation
            </summary>
        </member>
        <member name="P:MCTS.Core.Node.TotalScore">
            <summary>
            The total score this node has as a result of direct simulation or backpropagation
            </summary>
        </member>
        <member name="P:MCTS.Core.Node.Depth">
            <summary>
            The Depth of this node in the game tree
            </summary>
        </member>
        <member name="P:MCTS.Core.Node.UnexpandedMoves">
            <summary>
            A list of possible moves from this nodes board state that have not yet been expanded
            </summary>
        </member>
        <member name="M:MCTS.Core.Node.Initialise(MCTS.Core.Node,MCTS.Core.Board)">
            <summary>
            Creates a new node with the given board and Parent node
            </summary>
            <param name="ParentNode">The Parent of this node, null if this is the root node</param>
            <param name="board">The game board for this node</param>
        </member>
        <member name="M:MCTS.Core.Node.Expand">
            <summary>
            If there are still possible moves left for this node, create a child node with one of them played on it
            </summary>
        </member>
        <member name="M:MCTS.Core.Node.Update(System.Single)">
            <summary>
            Updates the score and Visits values of this node and its Parents
            Used during backpropagation
            </summary>
            <param name="score">The score to update this node with</param>
        </member>
        <member name="M:MCTS.Core.Node.UCBValue">
            <summary>
            Gets the Upper Confidence Bound 1 value of this node
            </summary>
            <returns>The Upper Confidence Bound 1 value of this node</returns>
        </member>
        <member name="M:MCTS.Core.Node.GetBestChild">
            <summary>
            Get the best child node of this node, used in calculating the best possible move from the point of this node <param/>
            The best child is the child with the highest amount of visits
            </summary>
            <returns></returns>
        </member>
        <member name="P:MCTS.Core.Node.IsLeafNode">
            <summary>
            Signals if this node is a leaf node or not <para/>
            A node is a leaf node if its game has ended
            </summary>
        </member>
        <member name="P:MCTS.Core.Node.AverageScore">
            <summary>
            The average score for this node <para/>
            Determined from the total score and number of Visits
            </summary>
        </member>
        <member name="T:MCTS.Core.ThreadSafeRandom">
            <summary>
            A thread-safe random class, that can be used to generate random numbers concurrently across multiple threads
            </summary>
        </member>
        <member name="F:MCTS.Core.ThreadSafeRandom.seed">
            <summary>
            The random seed, determined from the environment tickcount
            </summary>
        </member>
        <member name="M:MCTS.Core.ThreadSafeRandom.Rand">
            <summary>
            Gets a new random integer value
            </summary>
            <returns>A random integer value</returns>
        </member>
        <member name="M:MCTS.Core.ThreadSafeRandom.Rand(System.Int32)">
            <summary>
            Gets a new random integer value that is at least as small as the passed in minimum value
            </summary>
            <param name="minValue">The minimum value that the random integer can be</param>
            <returns>A random integer value that is at least as big as the minimum value</returns>
        </member>
        <member name="M:MCTS.Core.ThreadSafeRandom.Rand(System.Int32,System.Int32)">
            <summary>
            Gets a new random integer value that is between the inclusive minimum value and exclusing maximum value
            </summary>
            <param name="minValue">The inclusive minimum value that the random integer can be</param>
            <param name="maxValue">The exclusive maximum value that the random integer can be</param>
            <returns>A new random integer value that is between the inclusive minimum value and exclusing maximum value</returns>
        </member>
        <member name="T:MCTS.Core.InvalidMoveException">
            <summary>
            An exception which should be thrown when an invalid move is created or used
            </summary>
        </member>
        <member name="M:MCTS.Core.InvalidMoveException.#ctor">
            <summary>
            Creates an invalid move exception
            </summary>
        </member>
        <member name="M:MCTS.Core.InvalidMoveException.#ctor(System.String)">
            <summary>
            Creates an invalid move exception with a message
            </summary>
            <param name="message">The message to include in the exception</param>
        </member>
        <member name="T:MCTS.Core.ListExtension">
            <summary>
            Adds utility methods to <see cref="T:System.Collections.Generic.List`1"/>
            </summary>
        </member>
        <member name="M:MCTS.Core.ListExtension.PickRandom``1(System.Collections.Generic.IList{``0})">
            <summary>
            Picks a random element from the given list and returns it <para/>
            This method is thread-safe
            </summary>
            <typeparam name="T"> The type that the source list contains</typeparam>
            <param name="source">The source list to choose the element from</param>
            <returns>The randomly chosen list element</returns>
        </member>
        <member name="T:InvalidNodeException">
            <summary>
            An exception which should be thrown when an invalid node is being used <para/>
            For example, trying to add children to a leaf node
            </summary>
        </member>
        <member name="M:InvalidNodeException.#ctor">
            <summary>
            Creates an invalid node exception
            </summary>
        </member>
        <member name="M:InvalidNodeException.#ctor(System.String)">
            <summary>
            Creates an invalid node exception with a message
            </summary>
            <param name="message">The message to include in the exception</param>
        </member>
    </members>
</doc>
